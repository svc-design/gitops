server {
  listen 80;
  server_name {{ item.domain | join(' ') }};
  return 301 https://$host$request_uri;
}

server {
  listen 443 ssl;
  server_name {{ item.domain | join(' ') }};

  ssl_certificate     {{ item.ssl_certificate }};
  ssl_certificate_key {{ item.ssl_certificate_key }};
  ssl_protocols       TLSv1.2 TLSv1.3;
  ssl_ciphers         HIGH:!aNULL:!MD5;

  root  /var/www/XControl/ui/homepage/out;
  index index.html;

  # /api/ 路径反向代理，不跳转
  location /api/ {
    proxy_pass http://127.0.0.1:8080;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  # /api/askai 接口限流（基于 IP 或 user 参数）
  location = /api/askai {
    access_by_lua_block {
      local redis = require "resty.redis"
      local r = redis:new()
      r:set_timeout(200)
      local ok, err = r:connect("127.0.0.1", 6379)
      if not ok then
        ngx.log(ngx.ERR, "Redis connect error: ", err)
        return ngx.exit(500)
      end

      local user = ngx.var.arg_user or ngx.var.remote_addr
      local today = os.date("%Y%m%d")
      local key = "limit:user:" .. user .. ":" .. today

      local count, err = r:incr(key)
      if count == 1 then r:expire(key, 86400) end
      if count > 200 then
        ngx.status = 429
        ngx.say("Too Many Requests: daily limit reached")
        return ngx.exit(429)
      end
    }

    proxy_pass http://127.0.0.1:8080;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  # 页面请求：默认静态页面 + HTML5 history fallback
  location / {
    try_files $uri $uri/ /index.html;
  }

  # 静态资源缓存优化
  location ~* \.(?:ico|css|js|gif|jpe?g|png|woff2?)$ {
    expires 30d;
    access_log off;
    add_header Cache-Control "public";
  }

  # 拒绝访问隐藏文件（如 .env）
  location ~ /\. {
    deny all;
  }
}
